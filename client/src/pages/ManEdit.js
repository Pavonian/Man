/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e8611528763035aac7a59c3
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";
import Chip from "@material-ui/core/Chip";
import Input from "@material-ui/core/Input";

// Custom Actions


// START IMPORT ACTIONS
import ManActions from "../redux/actions/ManActions";
import EarsActions from "../redux/actions/EarsActions";
import FaceActions from "../redux/actions/FaceActions";
import EyesActions from "../redux/actions/EyesActions";

// END IMPORT ACTIONS

/** APIs

* actionsMan.create
*	@description CRUD ACTION create
*
* actionsMan.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*
* actionsMan.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsEars.list
*	@description CRUD ACTION list
*
* actionsUser.list
*	@description CRUD ACTION list
*
* actionsFace.list
*	@description CRUD ACTION list
*
* actionsEyes.list
*	@description CRUD ACTION list
*

**/

class ManEdit extends Component {
  // Init man
  constructor(props) {
    super(props);
    this.state = {
      man: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsMan.loadMan(this.props.match.params.id);
    }
    
    this.props.actionsEars.loadEarsList();
    this.props.actionsEyes.loadEyesList();
    this.props.actionsFace.loadFaceList();
    this.props.actionsUser.loadUserList();
  }

  // Insert props man in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      man: props.man
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.man._id) {
      this.props.actionsMan.saveMan(this.state.man).then(data => {
        this.props.history.push("/mans/");
      });
    } else {
      this.props.actionsMan.createMan(this.state.man).then(data => {
        this.props.history.push("/mans/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Man Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="last"
            label="Last"
            value={this.state.man.last || ""}
            onChange={Utils.handleChange.bind(this, "man")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="name"
            label="Name"
            value={this.state.man.name || ""}
            onChange={Utils.handleChange.bind(this, "man")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.man.name && this.state.man.name === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation m:m ears with ears */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel htmlFor="ears">Ears</InputLabel>
            <Select
              multiple
              value={this.state.man.ears || []}
              onChange={Utils.handleChangeSelect.bind(this, "man")}
              input={<Input id="ears" name="ears" />}
              renderValue={selected => (
                <div>
                  {selected.map(value => (
                    <Chip key={value} label={value} />
                  ))}
                </div>
              )}
            >
              {this.props.listEars && this.props.listEars.map(item => (
                <MenuItem
                  key={item._id}
                  value={item._id}
                  style={{
                    fontWeight:
                      this.state.man.ears &&
                      this.state.man.ears.indexOf(item._id) === -1
                        ? "regular"
                        : "bold"
                  }}
                >
                  {item._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* Relation m:m eyes with eyes */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel htmlFor="eyes">Eyes</InputLabel>
            <Select
              multiple
              value={this.state.man.eyes || []}
              onChange={Utils.handleChangeSelect.bind(this, "man")}
              input={<Input id="eyes" name="eyes" />}
              renderValue={selected => (
                <div>
                  {selected.map(value => (
                    <Chip key={value} label={value} />
                  ))}
                </div>
              )}
            >
              {this.props.listEyes && this.props.listEyes.map(item => (
                <MenuItem
                  key={item._id}
                  value={item._id}
                  style={{
                    fontWeight:
                      this.state.man.eyes &&
                      this.state.man.eyes.indexOf(item._id) === -1
                        ? "regular"
                        : "bold"
                  }}
                >
                  {item._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* Relation 1:m face with Face */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="face">
              Face
            </InputLabel>
            <Select
              value={this.state.man.face || ""}
              onChange={Utils.handleChangeSelect.bind(this, "man")}
              inputProps={{
                id: "face",
                name: "face"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listFace && this.props.listFace.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Relation 1:m user with User */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="user">
              User
            </InputLabel>
            <Select
              value={this.state.man.user || ""}
              onChange={Utils.handleChangeSelect.bind(this, "man")}
              inputProps={{
                id: "user",
                name: "user"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listUser && this.props.listUser.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/mans/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsMan: bindActionCreators(ManActions, dispatch),
    actionsEars: bindActionCreators(EarsActions, dispatch),
    actionsFace: bindActionCreators(FaceActions, dispatch),
    actionsEyes: bindActionCreators(EyesActions, dispatch),
  };
};

// Validate types
ManEdit.propTypes = { 
  actionsMan: PropTypes.object.isRequired,
  actionsEars: PropTypes.object.isRequired,
  actionsFace: PropTypes.object.isRequired,
  actionsEyes: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    man: state.ManEditReducer.man,
    listEars: state.ManEditReducer.listEars,
    listEyes: state.ManEditReducer.listEyes,
    listFace: state.ManEditReducer.listFace,
    listUser: state.ManEditReducer.listUser
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ManEdit);
